#install.packages("taskscheduleR")
library(taskscheduleR)
library(taskscheduleR)
taskscheduleR:::taskschedulerAddin()
install.packages("miniUI")
install.packages("shiny")
library(shiny)
library(tools)
library(miniUI)
library(digest)
library(taskscheduleR)
taskscheduleR:::taskschedulerAddin()
taskscheduleR:::taskschedulerAddin()
taskscheduleR:::taskschedulerAddin()
path <- "D:\\r_automaton\\auto_helloworld.R"
taskscheduler_create(taskname = "hello taskscheduler!",
rscript = path,
schedule = "MINUTE",
#starttime = format(Sys.time(), "%H:%M:%S"),
starttime = format(Sys.time(), "23:26:30"),
startdate = format(Sys.time(), "%d/%m/%Y"))
tasks <- taskscheduler_ls()
str(tasks)
taskscheduleR:::taskschedulerAddin()
taskscheduler_delete(taskname = "hello taskscheduler!")
taskscheduleR:::taskschedulerAddin()
taskscheduleR:::taskschedulerAddin()
taskscheduleR:::taskschedulerAddin()
taskscheduleR:::taskschedulerAddin()
tasks <- taskscheduler_ls()
str(tasks)
path <- "D:\\r_automaton\\auto_helloworld.R"
taskscheduler_create(taskname = "hello_taskscheduler",
rscript = path,
schedule = "MINUTE",
starttime = format(Sys.time(), "%H:%M:%S"),
startdate = format(Sys.time(), "%d/%m/%Y"))
library(taskscheduleR)
path <- "D:\\r_automaton\\auto_helloworld.R"
taskscheduler_create(taskname = "hello_taskscheduler",
rscript = path,
schedule = "MINUTE",
starttime = format(Sys.time(), "%H:%M:%S"),
startdate = format(Sys.time(), "%d/%m/%Y"))
tasks <- taskscheduler_ls()
str(tasks)
?taskscheduler_delete()
?taskscheduler_stop()
taskscheduler_delete(taskname = "hello-taskscheduler!")
taskscheduleR:::taskschedulerAddin()
taskscheduler_delete(taskname = "hello_taskscheduler")
Sys.which("make")
Sys.which("make")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
install.packages("jsonlite", type = "source")
old_path <- Sys.getenv("PATH")
old_path
Sys.setenv(PATH = paste(old_path, "C:\\Program Files\\R\\R-4.0.3\\bin", sep = ";"))
Sys.getenv("PATH")
Sys.setenv(PATH = paste(old_path, "C:\\Rtools\\bin", sep = ";"))
Sys.setenv(PATH = paste(old_path, "C:\\Rtools\\gcc-4.6.3\\bin", sep = ";"))
Sys.getenv("PATH")
library(shiny); runApp('D:/LymphomeStudenten2020/00ProjektgruppeLymphome/00Organisation/DAA- & DAU-Simulation/AnonApp zum Testen/AnonApp.R')
runApp('D:/LymphomeStudenten2020/00ProjektgruppeLymphome/00Organisation/DAA- & DAU-Simulation/AnonApp zum Testen/AnonApp.R')
runApp('D:/LymphomeStudenten2020/00ProjektgruppeLymphome/00Organisation/DAA- & DAU-Simulation/AnonApp zum Testen/AnonApp.R')
install.packages("flowCore")
A <- ReadFCS("C:\Users\Administrator\Documents\KR 25%KM CLL 2019-12-03 001.LMD")
A <- ReadFCS("\Users\Administrator\Documents\KR 25%KM CLL 2019-12-03 001.LMD")
A <- ReadFCS("Users\Administrator\Documents\KR 25%KM CLL 2019-12-03 001.LMD")
A <- ReadFCS("C:/Users/Administrator/Documents/KR 25%KM CLL 2019-12-03 001.LMD")
install.packages("prada")
A <- ReadFCS("C:/Users/Administrator/Documents/KR 25%KM CLL 2019-12-03 001.LMD")
A <- flowCore::read.FCS("C:/Users/Administrator/Documents/KR 25%KM CLL 2019-12-03 001.LMD")
library("flowCore")
install.packages("flowCore")
A <- readFCS("C:/Users/Administrator/Documents/KR 25%KM CLL 2019-12-03 001.LMD")
A <- prada::readFCS("C:/Users/Administrator/Documents/KR 25%KM CLL 2019-12-03 001.LMD")
install.packages("prada")
version
setRepositories()
ap <- available.packages()
view(ap)
View(ap)
install.packages("flowCore")
A <- ReadFCS("C:/Users/Administrator/Documents/KR 25%KM CLL 2019-12-03 001.LMD")
A <- flowCore::read.FCS("C:/Users/Administrator/Documents/KR 25%KM CLL 2019-12-03 001.LMD")
A <- flowCore::read.FCS("C:/Users/Administrator/Documents/KR 25%KM CLL 2019-12-03 001.LMD", dataset = 2)
View(A)
B <- flowCore::read.FCS("C:/Users/Administrator/Documents/testtest.LMD", dataset = 2)
View(B)
runApp('D:/LymphomeStudenten2020/00ProjektgruppeLymphome/00Organisation/DAA- & DAU-Simulation/AnonApp zum Testen/AnonApp.R')
B <- flowCore::read.FCS("C:/Users/Administrator/Documents/test.LMD", dataset = 2)
View(B)
rinternals <- file.path(R.home("include"), "Rinternals.h")
file.show(rinternals)
cd "C:\Users\Administrator\Desktop\toLRN"
cd "C:/Users/Administrator/Desktop/toLRN"
cd C:/Users/Administrator/Desktop/toLRN
cd C:\Users\Administrator\Desktop\toLRN
cd C\Users\Administrator\Desktop\toLRN
load("C:\Users\Administrator\Desktop\toLRN\ReadData.R")
load(C:\Users\Administrator\Desktop\toLRN\ReadData.R)
load(C:/Users/Administrator/Desktop/toLRN/ReadData.R)
load(file=C:/Users/Administrator/Desktop/toLRN/ReadData.R)
source("C:\Users\Administrator\Desktop\toLRN\ReadData.R")
source(C:\Users\Administrator\Desktop\toLRN\ReadData.R)
source(C:/Users/Administrator/Desktop/toLRN/ReadData.R)
source(C/Users/Administrator/Desktop/toLRN/ReadData.R)
source("C/Users/Administrator/Desktop/toLRN/ReadData.R")
source('C:/Users/Administrator/Desktop/toLRN/ReadData.R')
source("C/Users/Administrator/Desktop/toLRN/ReadData.R")
pwd
pwd()
getwd
return (result)
#  requireRpackage('digest')
if(grepl('.lrn',FileName)){
stop('Please use ReadLRN()')
}
remove.packages("dbt.DataIO")
devtools::remove.packages("dbt.DataIO")
library(devtools)
dev_mode(true)
dev_mode("true")
remove.packages(dbt.DataIO)
show.packages
list.packages()
show.packages()
dev_mode("false")
install_svn(svn://pc12592.mathematik.uni-marburg.de/AgUltsch/PUB/dbt/DataIO)
install_svn("svn://pc12592.mathematik.uni-marburg.de/AgUltsch/PUB/dbt/DataIO")
install.packages("C:/Users/Administrator/Desktop/toLRN/DataIO", repos = NULL, type = "source")
remove.packages(dbt.DataIO)
install.packages("C:/Users/Administrator/Desktop/toLRN/DataIO", repos = NULL, type = "source")
install.packages("C:/Users/Administrator/Desktop/toLRN/DataIO", repos = NULL, type = "source", INSTALL_opts="--no-staged-install")
update.packages("C:/Users/Administrator/Desktop/toLRN/DataIO", repos = NULL, type = "source", INSTALL_opts="--no-staged-install")
update.packages("C:/Users/Administrator/Desktop/toLRN/DataIO", repos = NULL, type = "source")
install.packages("C:/Users/Administrator/Desktop/toLRN/DataIO", repos = NULL, type = "source", INSTALL_opts="--no-staged-install")
remove.packages("dbt.DataIO")
install.packages("C:/Users/Administrator/Desktop/toLRN/DataIO", repos = NULL, type = "source", INSTALL_opts="--no-staged-install")
install.packages("C:/Users/Administrator/Desktop/toLRN/DataIO", repos = NULL, type = "source", INSTALL_opts="--no-staged-install")
install.packages("C:/Users/Administrator/Desktop/toLRN/DataIO", repos = NULL, type = "source", INSTALL_opts="--no-staged-install")
library(dbt.DataIO)
ReadFCS(""C:/Users/Administrator/Desktop/toLRN/90RawData/JohnDoeBlutTube1.LMD"")
ReadFCS(C:/Users/Administrator/Desktop/toLRN/90RawData/JohnDoeBlutTube1.LMD"")
ReadFCS("C:/Users/Administrator/Desktop/toLRN/90RawData/JohnDoeBlutTube1.LMD")
ReadFCSNavios("C:/Users/Administrator/Desktop/toLRN/90RawData/JohnDoeBlutTube1.LMD")
ReadFCS(FileName = "JohnDoeBlutTube1.LMD" path = "C:/Users/Administrator/Desktop/toLRN/90RawData/JohnDoeBlutTube1.LMD")
ReadFCS(FileName = "JohnDoeBlutTube1.LMD", path = "C:/Users/Administrator/Desktop/toLRN/90RawData/JohnDoeBlutTube1.LMD")
ReadFCS(FileName = "JohnDoeBlutTube1.LMD", path = "C:/Users/Administrator/Desktop/toLRN/90RawData/")
ReadFCS(FileName = "JohnDoeBlutTube1.LMD", path = "C:/Users/Administrator/Desktop/toLRN/90RawData")
ReadFCS(FileName = "00 14-MAY-2019-06.FCS", path = "C:/Users/Administrator/Desktop/toLRN/90RawData/TestDatenannonymisierung")
ReadFCS(FileName = "FR42_FR42.fcs", path = "C:/Users/Administrator/Desktop/toLRN/90RawData/TestDatenannonymisierung")
ReadFCS(""C:/Users/Administrator/Desktop/toLRN/90RawData/TestDatenannonymisierung/FR42_FR42.fcs"")
ReadFCS("C:/Users/Administrator/Desktop/toLRN/90RawData/TestDatenannonymisierung/FR42_FR42.fcs"")
ReadFCS("C:/Users/Administrator/Desktop/toLRN/90RawData/TestDatenannonymisierung/FR42_FR42.fcs")
V = ReadFCS("C:/Users/Administrator/Desktop/toLRN/90RawData/TestDatenannonymisierung/FR42_FR42.fcs")
CompensatedData <- V$CompensatedData
CompensationMatrix <- V$CompensationMatrix
FCSData <- V$FCSData
data <- V$PlainData
Header <- V$VarNames
normedData <- round(data, digits = 2)
InDirectory <- "C:/Users/Administrator/Desktop/toLRN"
OutFileName <- "Test_compensated.lrn"
OutDirectory <- InDirectory
WriteLRN(OutFileName, OutDirectory = OutDirectory, Data = data, Header = Header)
ReadLRN(OutFileName, OutDirectory)
Test = toString(gsub("//", "\", "Hallo//lol"")
Test = toString(gsub("//", "\", "Hallo`//lol")
print(Test)
Test = toString(gsub("H", "K", "Hallolol")
Test = toString(gSub("H", "K", "Hallolol")
Test = toString(gSub("H", "K", "Hallolol"))
Test = gsub("H", "K", "Hallolol")
print(Test)
Test = gsub("//", "K", "Hallolol")
Test = gsub("//", "\", "Hallo//lol")
print(Test)
Test = gsub("//", "\", "Hallo//lol")
print(Test)
Test = gsub("\/\/", "\\", "Hallo//lol")
Test = gsub("//", "\\", "Hallo//lol")
print(Test)
shiny::runGitHub("AnonymizationTool", "JonasSchulz-Marner", subdir = "R")
gc()
n
setwd("D:/PLAIT_Data_CollectoR")
# install.packages("RSQLite")
library(RSQLite)
# Create a connection to our database
conn2DjangoDB <- dbConnect(RSQLite::SQLite(), "C:/inetpub/wwwroot/project_plait_0/db.sqlite3")
# List all the tables available in the database
dbListTables(conn2DjangoDB)
DjangoDB_df <- as.data.frame(dbListTables(conn2DjangoDB))
DjangoDB_df
View(DjangoDB_df)
DjangoDB_df <- as.data.frame(conn2DjangoDB)
library(sqldf)
install.packages("sqldf")
library(sqldf)
library(RSQLite)
# install.packages("sqldf")
library(sqldf)
DjangoDB_df <- sqlQuery(conn2DjangoDB,"SELECT *  FROM ticket_ticket;");
install.packages("RODBC")
library(RODBC)
library(RSQLite)
# install.packages("sqldf")
library(sqldf)
# install.packages("RODBC")
library(RODBC)
DjangoDB_df <- sqlQuery(conn2DjangoDB,"SELECT *  FROM ticket_ticket;");
DjangoDB_df <- sqlQuery(conn2DjangoDB,"SELECT *  FROM dbo.ticket_ticket;");
# Create a connection to our database
conn2DjangoDB <- dbConnect(RSQLite::SQLite(), "C:/inetpub/wwwroot/project_plait_0/db.sqlite3")
library(dplyr)
# The easiest way to get dplyr is to install the whole tidyverse:
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
# install.packages("RSQLite")
library(RSQLite)
# install.packages("sqldf")
library(sqldf)
# install.packages("RODBC")
library(RODBC)
# The easiest way to get dplyr is to install the whole tidyverse:
# install.packages("tidyverse")
# Alternatively, install just dplyr:
# install.packages("dplyr")
library(dplyr)
# install.packages("RSQLite")
library(RSQLite)
# install.packages("sqldf")
library(sqldf)
# install.packages("RODBC")
library(RODBC)
# The easiest way to get dplyr is to install the whole tidyverse:
# install.packages("tidyverse")
# Alternatively, install just dplyr:
# install.packages("dplyr")
library(dplyr)
remove.packages("rlang")
install.packages("rlang")
library(rlang)
library(dplyr)
